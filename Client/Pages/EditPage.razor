@inject ActivePageService ActivePageService
@inject IToastService toastService
@inject HttpClient Http
@page "/EditPage"
<PageTitle>Edit Page</PageTitle>
<style>
    .image-container {
        display: flex;
        justify-content: space-around;
        align-items: center;
        margin-bottom: 20px;
    }
        .image-container > div {
            text-align: center;
            margin-bottom: 30px;
        }
        .image-container img {
            width: 10vw;
            max-width: 75px;
            height: auto;
            cursor: pointer;
            border-bottom: none !important; 
        }
    .form-section {
        display: inline-block;
        flex-direction: row;
        margin-bottom: 10px; 
        vertical-align: top;
        margin-right: 10px;
    }
    .form-sectionScrolling {
        display: inline-block;
        flex-direction: row;
        margin-bottom: 10px; 
        vertical-align: top;
        margin-right: 10px;
        overflow: auto;
        max-height: 200px;
    }
    div {
        margin-bottom: 10px; 
    }
    label {
        display: block; 
        margin-bottom: 5px;
    }
    input {
        margin-bottom: 10px;
    }
    .on-loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(128, 128, 128, 0.5); 
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 999; 
    }
    .loader {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000; 
    }
</style>
<h1>EditPage</h1>
<p>Form for order editing</p>
 @if (ordersName != null)
   {
        <div class="form-container">
        <label for="stateInput">Select an order:</label>
        <input type="text" id="orderSearch" @bind="selectedOrderName" list="ordersNameArray" placeholder="Search for orders" style="width: 300px;" />
        <datalist id="ordersNameArray">
                @foreach (var orderName in ordersName)
                {
                    <option value="@orderName"></option>
                }
            </datalist>
        <button @onclick="GetOneOrder" class="btn btn-primary" style="margin-left: 20px;">Receive the selected order</button>
            @if (NewOrder.Windows != null)
            {
            <button @onclick="EditOrderInDB" style="margin-left: 30px;" class="btn btn-success btn-block">Change order</button>
            <button @onclick="DeleteOrderInDB" style="margin-left: 50px;" class="btn btn-danger btn-block">Delete entire order</button>
            }
            <div style="margin-top: 20px">
                @if (NewOrder != null && NewOrder.Name != "" && NewOrder.Id != 0)
                {
                    @if (NewOrder.Windows != null && NewOrder.Windows.Count != 0)
                    {
                        <div class="form-sectionScrolling" style="border: 1px solid black;">
                            <table class="table">
                                <thead>
                                    <tr>
                                    <th>№</th>
                                    <th>Window name</th>
                                    <th>Number of windows</th> 
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var (window, index) in NewOrder.Windows.Select((w, i) => (w, i)))
                                    {
                                        <tr @onclick="() => HandleRowClick(window)"
                                            style="@(IsRowSelected(window) ? "background-color: green; color: white; " : "")">
                                            <td>@(index + 1)</td>
                                            <td>@window.Name</td>
                                            <td>@window.QuantityOfWindows</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    @if (NewOrder.Windows != null && NewWindow.SubElements != null)
                    {
                        <div class="form-sectionScrolling" style="margin-left: 30px; border: 1px solid black;">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>№</th>
                                        <th>Type</th>
                                        <th>Height</th> 
                                        <th>Width</th> 
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var (subElement, index) in NewWindow.SubElements.Select((w, i) => (w, i)))
                                    {
                                        <tr @onclick="() => HandleRowSubElementClick(subElement)"
                                            style="@(IsRowSubElementSelected(subElement)? "background-color: green; color: white; " : "")">
                                            <td>@(index + 1)</td>
                                            <td>@subElement.Type</td>
                                            <td>@subElement.Height</td>
                                            <td>@subElement.Width</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    <div style="border: 2px solid #000; padding: 10px;">
                        <div class="form-section">
                        <label for="nameInput">Adding a window to an order</label>
                            <EditForm Model="@NewWindow">
                                <DataAnnotationsValidator />
                                <div>
                                <label>Title:</label>
                                    <InputText @bind-Value="NewWindow.Name" />
                                    <ValidationMessage For="@(() => NewWindow.Name)" />
                                </div>
                                <div>
                                    <label>Количество окон:</label>
                                    <InputNumber @bind-Value="NewWindow.QuantityOfWindows" />
                                    <ValidationMessage For="@(() => NewWindow.QuantityOfWindows)" />
                                </div>
                                @if (NewOrder.Windows != null && NewWindow.SubElements != null)
                                {
                                <label>Number of sub-elements at the window: @NewWindow.SubElements.Count</label>
                                }
                                <div class="row">
                                    <div class="col">
                                        <button type="submit" class="btn btn-primary btn-block">
                                            @if (selectedWindow != null)
                                            {
                                                <span>Save</span>
                                            }
                                            else
                                            {
                                            <span>Add a window to your order</span>
                                            }
                                        </button>
                                    </div>
                                    @if (selectedWindow != null)
                                    {
                                        <div class="col">
                                            <button @onclick="DeleteWindow" class="btn btn-danger btn-block">Удалить</button>
                                        </div>
                                    }
                                </div>
                            </EditForm>
                        </div>
                        @if (NewOrder.Windows != null)
                        {
                            <div class="form-section" style="margin-left: 50px;">
                            <label for="nameInput">Adding subelements to the window</label>
                                <EditForm Model="@NewSubElement">
                                    <DataAnnotationsValidator />
                                    <div>
                                        <label>Type</label>
                                        <InputText @bind-Value="NewSubElement.Type" />
                                        <ValidationMessage For="@(() => NewSubElement.Type)" />
                                    </div>
                                    <div>
                                    <label>Width:</label>
                                        <InputNumber @bind-Value="NewSubElement.Width" />
                                        <ValidationMessage For="@(() => NewSubElement.Width)" />
                                    </div>
                                    <div>
                                        <label>Heigth:</label>
                                        <InputNumber @bind-Value="NewSubElement.Height" />
                                        <ValidationMessage For="@(() => NewSubElement.Height)" />
                                    </div>
                                    <div class="row">
                                        <div class="col">
                                            <button type="submit" class="btn btn-primary btn-block">
                                                @if (selectedSubElement != null)
                                                {
                                                    <span>Save</span>
                                                }
                                                else
                                                {
                                                <span>Add a sub-element to the window</span>
                                                }
                                            </button>
                                        </div>
                                        @if (selectedSubElement != null)
                                        {
                                            <div class="col">
                                                <button @onclick="DeleteSubElement" class="btn btn-danger btn-block">Delete</button>
                                            </div>
                                        }
                                    </div>
                                </EditForm>
                            </div>
                        }
                    </div>
                }
            </div>
    </div>
  }
<BlazoredToasts />
@if (IsLoading)
{
    <div class="on-loading-overlay" id="app">
        <div class="loader">
            <img src="gifs/loader.gif" alt="Loading..." class="loader-image" />
        </div>
    </div>
}
@code {

    public Order NewOrder = new Order();
    Window NewWindow = new Window();
    SubElement NewSubElement = new SubElement();
    Order CurrentOrder;
    Window selectedWindow;
    SubElement selectedSubElement;
    string[]? ordersName;
    public string selectedOrderName = "";
    private bool IsLoading = false;
    private async void GetOneOrder()
    {
        if (selectedOrderName != "")
        {
            IsLoading = true;
            NewWindow = new Window();
            NewSubElement = new SubElement();
            var orders = await Http.GetFromJsonAsync<Order[]>($"Order/GetOneOrder?nameOrder={selectedOrderName}");
            IsLoading = false;

            if (orders != null && orders.Length != 0)
            {
                NewOrder = orders.First();

            }
            else
            {
                toastService.ShowInfo($"Selected order not found");
                selectedOrderName = "";
                CurrentOrder = null;
            }
            StateHasChanged();
        }
        else
            toastService.ShowInfo($"Order name not selected");
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        ordersName = await Http.GetFromJsonAsync<string[]>("Order/GetOrdersName");
        IsLoading = false;
        ActivePageService.ActivePage = "editpage";
        StateHasChanged();
    }
    private void DeleteSubElement()
    {
        if (NewWindow.SubElements.Contains(NewSubElement))
        {
            bool isGodd = NewWindow.SubElements.Remove(NewSubElement);
            toastService.ShowInfo($"{selectedSubElement.Type} was deleted from {NewWindow.Name}");
            NewSubElement = new SubElement();
            selectedSubElement = null;
            StateHasChanged();
        }
        else
        {
            toastService.ShowError($"Deletion error");
        }
    }
    private void DeleteWindow()
    {
        if (NewOrder.Windows.Contains(NewWindow))
        {
            bool isGodd = NewOrder.Windows.Remove(NewWindow);
            toastService.ShowInfo($"The window has been removed from the order {selectedWindow.Name}");
            NewWindow = new Window();
            NewSubElement = new SubElement();
            selectedWindow = null;
            selectedSubElement = null;
            StateHasChanged();
        }
        else
        {
            toastService.ShowError($"Deletion error");
        }
    }
    private void HandleRowClick(Window clickedWindow)
    {
        // NewWindow = clickedWindow;
        selectedWindow = clickedWindow;
        NewWindow = clickedWindow; // это нужно для того, чтобы выбирать из таблицы окно
        StateHasChanged(); // Важно вызывать StateHasChanged, чтобы обновить компонент
    }
    private void HandleRowSubElementClick(SubElement clickedSubElement)
    {
        NewSubElement = clickedSubElement;
        selectedSubElement = clickedSubElement; // это нужно для того, чтобы выбирать из таблицы окно
        StateHasChanged(); // Важно вызывать StateHasChanged, чтобы обновить компонент
    }
    private bool IsRowSelected(Window window)
    {
        return window == NewWindow;
    }
    private bool IsRowSubElementSelected(SubElement subElement)
    {
        return subElement == selectedSubElement;
    }
    private async Task EditOrderInDB()
    {
        IsLoading = true;
        HttpResponseMessage response = await Http.PutAsJsonAsync("Order/EditOrder", NewOrder);
        IsLoading = false;
        if (response.IsSuccessStatusCode)
        {
            NewOrder = await response.Content.ReadFromJsonAsync<Order>();
            toastService.ShowSuccess($"Change orders {NewOrder.Name} Id № {NewOrder.Id}");
            NewOrder = new Order();
            NewWindow = new Window();
            NewSubElement = new SubElement();
            selectedWindow = null;
            selectedSubElement = null;
        }
        else
        {
            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                if (!string.IsNullOrEmpty(errorMessage))
                {
                    toastService.ShowError($"Change orders: {errorMessage}");
                }
                else
                {
                    toastService.ShowError($"Failed to complete the operation. Please try again");
                }
            }
            else
                toastService.ShowError($"Error: {response.StatusCode} - {response.ReasonPhrase}");
        }
    }
    private async Task DeleteOrderInDB()
    {
        IsLoading = true;
        HttpResponseMessage response = await Http.PutAsJsonAsync("Order/DeleteOrder", NewOrder);
        if (response.IsSuccessStatusCode)
        {
            string message = await response.Content.ReadAsStringAsync();
            toastService.ShowSuccess(message);
            NewOrder = new Order();
            NewWindow = new Window();
            NewSubElement = new SubElement();
            Array.Clear(ordersName);
            selectedOrderName = "";
            selectedWindow = null;
            selectedSubElement = null;
            StateHasChanged();
            ordersName = await Http.GetFromJsonAsync<string[]>("Order/GetOrdersName");
        }
        else
        {
            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                if (!string.IsNullOrEmpty(errorMessage))
                {
                    toastService.ShowError($"Error: {errorMessage}");
                }
                else
                {
                    toastService.ShowError($"Failed to perform the operation. Please try again");
                }
            }
            else
                toastService.ShowError($"Error: {response.StatusCode} - {response.ReasonPhrase}");
        }
        IsLoading = false;
    }
}
